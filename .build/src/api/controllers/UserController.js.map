{
  "version": 3,
  "sources": ["../../../../src/api/controllers/UserController.ts"],
  "sourcesContent": ["import {models} from '../modelsController';\r\nimport {IUser} from \"../../interfaces/IUser\";\r\nimport {Request, Response} from 'express';\r\nimport { read } from 'fs';\r\n\r\nexport class UserController extends IUser {\r\n    static async getAll(req: Request, res: Response): Promise<void> {\r\n        const data = await models.Users.findAll({\r\n            attributes: [\r\n                'id',\r\n                'FirstName',\r\n                'SecondName',\r\n                'MiddleName',\r\n                'Adress',\r\n                'DateOfBirth',\r\n                'ProfessionName',\r\n                'Role'\r\n            ],\r\n            include: [{ all: true }]\r\n        });\r\n        res.send(data);\r\n    }\r\nstatic async getByID(req: Request, res: Response): Promise<void> {\r\n        const data = await models.Users.findByPk(req.params.id, {\r\n            attributes: [\r\n                'id',\r\n                'FirstName',\r\n                'SecondName',\r\n                'MiddleName',\r\n                'Adress',\r\n                'DateOfBirth',\r\n                'ProfessionName',\r\n                'Role'\r\n            ],\r\n            include: [{ all: true }]\r\n        });\r\n        res.send(data);\r\n    }\r\n\r\n    static async create(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n        models.Users.create({\r\n            FirstName: req.body.FirstName,\r\n            SecondName: req.body.SecondName,\r\n            MiddleName: req.body.MiddleName,\r\n            DateOfBirth: req.body.DateOfBirth,\r\n            Adress: req.body.Adress,\r\n            ProfessionName:req.body.ProfessionName,\r\n            PassportId: req.body.PassportId,\r\n            Login: req.body.Login,\r\n            Password: req.body.Password,\r\n            Role: req.body.Role\r\n\r\n        })\r\n            .then((data, ) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while creating.\"\r\n                    });\r\n                        else {\r\n                            res.status(200).send(data)\r\n                        }\r\n            });\r\n    }\r\n\r\n    static async update(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n\r\n        const oldUser = await models.Users.findByPk(req.params.id);\r\n\r\n        models.Users.update({\r\n            FirstName: req.body.FirstName || oldUser?.FirstName,\r\n            MiddleName: req.body.MiddleName || oldUser?.MiddleName,\r\n            SecondName: req.body.SecondName || oldUser?.SecondName,\r\n            Adress: req.body.Adress || oldUser?.Adress,\r\n            DateOfBirth: req.body.DateOfBirth || oldUser?.DateOfBirth,\r\n            ProfessionName:req.body.ProfessionName || oldUser?.ProfessionName,\r\n        }, {where: {id: req.params.id}})\r\n            .then((data) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while updating.\"\r\n                    });\r\n                else res.send(true);\r\n            });\r\n    }\r\n\r\n    static async delete(req: Request, res: Response): Promise<void> {\r\n        models.Users.destroy({where: {id: req.params.id}})\r\n            .then(data => {\r\n                if (!data) {\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while deleting.\"\r\n                    });\r\n                }\r\n                else res.send(true);\r\n            })\r\n    }\r\n\r\n    static async auth(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n        const data = await models.Users.findOne({\r\n            attributes: [\r\n                'id',\r\n                'Password',\r\n            ],\r\n            where: {Login: req.body.Login}\r\n        });\r\n        if (!data) {\r\n            res.status(400).send({\r\n                message: \"UserController don't found.\"\r\n            });\r\n            return\r\n        }\r\n\r\n\r\n        res.status(req.body.password === data.Password ? 200 : 401).send(req.body.password === data.Password);\r\n    }\r\n\r\n    static async changePassword(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n\r\n\r\n        models.Users.update({\r\n            Password: req.body.password\r\n        }, {where: {id: req.params.id}})\r\n            .then((data) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while updating.\"\r\n                    });\r\n                else res.send(true);\r\n            });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
