{
  "version": 3,
  "sources": ["../../../../src/api/controllers/TaskController.ts"],
  "sourcesContent": ["import {models} from '../modelsController';\r\nimport {Request, Response} from 'express';\r\nimport { IRest } from '../../interfaces/IRest';\r\n\r\nexport class TaskController extends IRest {\r\n    static async getAll(req: Request, res: Response): Promise<void> {\r\n        const data = await models.Task.findAll({\r\n            attributes: [\r\n                'id',\r\n                'Answer1',\r\n                'Answer2',\r\n                'Answer3',\r\n                'Answer4',\r\n                'Question',\r\n                'CursId'\r\n            ]\r\n        });\r\n        res.send(data);\r\n    }\r\nstatic async getByID(req: Request, res: Response): Promise<void> {\r\n        const data = await models.Task.findByPk(req.params.id, {\r\n            attributes: [\r\n                'id',\r\n                'Answer1',\r\n                'Answer2',\r\n                'Answer3',\r\n                'Answer4',\r\n                'Question',\r\n                'CursId'\r\n            ]\r\n        });\r\n        res.send(data);\r\n    }\r\n\r\n    static async create(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n\r\n\r\n        models.Task.create({\r\n            Answer1: req.body.Answer1,\r\n            Answer2: req.body.Answer2,\r\n            Answer3: req.body.Answer3,\r\n            Answer4: req.body.Answer4,\r\n            Question: req.body.Question,\r\n            CursId: req.body.CursId,\r\n            CorrectAnswer: req.body.CorrectAnswer\r\n            })\r\n            .then((data, ) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while creating.\"\r\n                    });\r\n                        else {\r\n                            res.status(200).send(data)\r\n                        }\r\n                    \r\n                ;\r\n            });\r\n    }\r\n\r\n    static async update(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n\r\n        const oldTask = await models.Task.findByPk(req.params.id);\r\n\r\n        models.Task.update({\r\n            Answer1: req.body.Answer1 || oldTask?.Answer1,\r\n            Answer2: req.body.Answer2 || oldTask?.Answer2,\r\n            Answer3: req.body.Answer3 || oldTask?.Answer3,\r\n            Answer4: req.body.Answer4 || oldTask?.Answer4,\r\n            Question: req.body.Question || oldTask?.Question,\r\n            CursId: req.body.CursId || oldTask?.CursId,\r\n            CorrectAnswer: req.body.CorrectAnswer || oldTask?.CorrectAnswer\r\n        }, {where: {id: req.params.id}})\r\n            .then((data) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while updating.\"\r\n                    });\r\n                else res.send(true);\r\n            });\r\n    }\r\n\r\n    static async delete(req: Request, res: Response): Promise<void> {\r\n        models.Task.destroy({where: {id: req.params.id}})\r\n            .then(data => {\r\n                if (!data) {\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while deleting.\"\r\n                    });\r\n                }\r\n                else res.send(true);\r\n            })\r\n    }\r\n\r\n    \r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,8BAAqB;AAErB,mBAAsB;AAEf,6BAA6B,mBAAM;AAAA,eACzB,OAAO,KAAc,KAA8B;AAC5D,UAAM,OAAO,MAAM,+BAAO,KAAK,QAAQ;AAAA,MACnC,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAGR,QAAI,KAAK;AAAA;AAAA,eAEJ,QAAQ,KAAc,KAA8B;AACzD,UAAM,OAAO,MAAM,+BAAO,KAAK,SAAS,IAAI,OAAO,IAAI;AAAA,MACnD,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAGR,QAAI,KAAK;AAAA;AAAA,eAGA,OAAO,KAAc,KAA8B;AAC5D,QAAI,CAAC,IAAI,MAAM;AACX,UAAI,OAAO,KAAK,KAAK;AAAA,QACjB,SAAS;AAAA;AAAA;AAKjB,mCAAO,KAAK,OAAO;AAAA,MACf,SAAS,IAAI,KAAK;AAAA,MAClB,SAAS,IAAI,KAAK;AAAA,MAClB,SAAS,IAAI,KAAK;AAAA,MAClB,SAAS,IAAI,KAAK;AAAA,MAClB,UAAU,IAAI,KAAK;AAAA,MACnB,QAAQ,IAAI,KAAK;AAAA,MACjB,eAAe,IAAI,KAAK;AAAA,OAEvB,KAAK,CAAC,SAAW;AACd,UAAI,CAAC;AACD,YAAI,OAAO,KAAK,KAAK;AAAA,UACjB,OACI;AAAA;AAAA,WAEC;AACD,YAAI,OAAO,KAAK,KAAK;AAAA;AAGjC;AAAA;AAAA;AAAA,eAIC,OAAO,KAAc,KAA8B;AAC5D,QAAI,CAAC,IAAI,MAAM;AACX,UAAI,OAAO,KAAK,KAAK;AAAA,QACjB,SAAS;AAAA;AAAA;AAIjB,UAAM,UAAU,MAAM,+BAAO,KAAK,SAAS,IAAI,OAAO;AAEtD,mCAAO,KAAK,OAAO;AAAA,MACf,SAAS,IAAI,KAAK,WAAW,oCAAS;AAAA,MACtC,SAAS,IAAI,KAAK,WAAW,oCAAS;AAAA,MACtC,SAAS,IAAI,KAAK,WAAW,oCAAS;AAAA,MACtC,SAAS,IAAI,KAAK,WAAW,oCAAS;AAAA,MACtC,UAAU,IAAI,KAAK,YAAY,oCAAS;AAAA,MACxC,QAAQ,IAAI,KAAK,UAAU,oCAAS;AAAA,MACpC,eAAe,IAAI,KAAK,iBAAiB,oCAAS;AAAA,OACnD,EAAC,OAAO,EAAC,IAAI,IAAI,OAAO,QACtB,KAAK,CAAC,SAAS;AACZ,UAAI,CAAC;AACD,YAAI,OAAO,KAAK,KAAK;AAAA,UACjB,OACI;AAAA;AAAA;AAEP,YAAI,KAAK;AAAA;AAAA;AAAA,eAIb,OAAO,KAAc,KAA8B;AAC5D,mCAAO,KAAK,QAAQ,EAAC,OAAO,EAAC,IAAI,IAAI,OAAO,QACvC,KAAK,UAAQ;AACV,UAAI,CAAC,MAAM;AACP,YAAI,OAAO,KAAK,KAAK;AAAA,UACjB,OACI;AAAA;AAAA;AAGP,YAAI,KAAK;AAAA;AAAA;AAAA;",
  "names": []
}
