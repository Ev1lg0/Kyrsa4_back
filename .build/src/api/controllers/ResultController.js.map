{
  "version": 3,
  "sources": ["../../../../src/api/controllers/ResultController.ts"],
  "sourcesContent": ["import {models} from '../modelsController';\r\nimport {Request, Response} from 'express';\r\nimport { IRest } from '../../interfaces/IRest';\r\n\r\nexport class ResultsController extends IRest {\r\n    static async getAll(req: Request, res: Response): Promise<void> {\r\n        const data = await models.Results.findAll({\r\n            attributes: [\r\n                'id',\r\n                'UserId',\r\n                'CursId',\r\n                'Grade'\r\n                \r\n            ]\r\n        });\r\n        res.send(data);\r\n    }\r\nstatic async getByID(req: Request, res: Response): Promise<void> {\r\n        const data = await models.Results.findByPk(req.params.id, {\r\n            attributes: [\r\n                'id',\r\n                'UserId',\r\n                'CursId',\r\n                'Grade'\r\n            ]\r\n        });\r\n        res.send(data);\r\n    }\r\n\r\n    static async create(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n\r\n\r\n        models.Results.create({\r\n            UserId: req.body.UserId,\r\n            CursId: req.body.CursId,\r\n            Grade: req.body.CursId\r\n            \r\n            })\r\n            .then((data, ) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while creating.\"\r\n                    });\r\n                        else {\r\n                            res.status(200).send(data)\r\n                        }\r\n                    \r\n                ;\r\n            });\r\n    }\r\n\r\n    static async update(req: Request, res: Response): Promise<void> {\r\n        if (!req.body) {\r\n            res.status(400).send({\r\n                message: \"Content can not be empty!\"\r\n            });\r\n        }\r\n\r\n        const oldResults = await models.Results.findByPk(req.params.id);\r\n\r\n        models.Results.update({\r\n            UserId: req.body.UserId || oldResults?.UserId,\r\n            CursId: req.body.CursId || oldResults?.CursId,\r\n            Grade: req.body.Grade || oldResults?.Grade\r\n            \r\n        }, {where: {id: req.params.id}})\r\n            .then((data) => {\r\n                if (!data)\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while updating.\"\r\n                    });\r\n                else res.send(true);\r\n            });\r\n    }\r\n\r\n    static async delete(req: Request, res: Response): Promise<void> {\r\n        models.Results.destroy({where: {id: req.params.id}})\r\n            .then(data => {\r\n                if (!data) {\r\n                    res.status(500).send({\r\n                        error:\r\n                            \"Some error occurred while deleting.\"\r\n                    });\r\n                }\r\n                else res.send(true);\r\n            })\r\n    }\r\n\r\n    \r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,8BAAqB;AAErB,mBAAsB;AAEf,gCAAgC,mBAAM;AAAA,eAC5B,OAAO,KAAc,KAA8B;AAC5D,UAAM,OAAO,MAAM,+BAAO,QAAQ,QAAQ;AAAA,MACtC,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAIR,QAAI,KAAK;AAAA;AAAA,eAEJ,QAAQ,KAAc,KAA8B;AACzD,UAAM,OAAO,MAAM,+BAAO,QAAQ,SAAS,IAAI,OAAO,IAAI;AAAA,MACtD,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAGR,QAAI,KAAK;AAAA;AAAA,eAGA,OAAO,KAAc,KAA8B;AAC5D,QAAI,CAAC,IAAI,MAAM;AACX,UAAI,OAAO,KAAK,KAAK;AAAA,QACjB,SAAS;AAAA;AAAA;AAKjB,mCAAO,QAAQ,OAAO;AAAA,MAClB,QAAQ,IAAI,KAAK;AAAA,MACjB,QAAQ,IAAI,KAAK;AAAA,MACjB,OAAO,IAAI,KAAK;AAAA,OAGf,KAAK,CAAC,SAAW;AACd,UAAI,CAAC;AACD,YAAI,OAAO,KAAK,KAAK;AAAA,UACjB,OACI;AAAA;AAAA,WAEC;AACD,YAAI,OAAO,KAAK,KAAK;AAAA;AAGjC;AAAA;AAAA;AAAA,eAIC,OAAO,KAAc,KAA8B;AAC5D,QAAI,CAAC,IAAI,MAAM;AACX,UAAI,OAAO,KAAK,KAAK;AAAA,QACjB,SAAS;AAAA;AAAA;AAIjB,UAAM,aAAa,MAAM,+BAAO,QAAQ,SAAS,IAAI,OAAO;AAE5D,mCAAO,QAAQ,OAAO;AAAA,MAClB,QAAQ,IAAI,KAAK,UAAU,0CAAY;AAAA,MACvC,QAAQ,IAAI,KAAK,UAAU,0CAAY;AAAA,MACvC,OAAO,IAAI,KAAK,SAAS,0CAAY;AAAA,OAEtC,EAAC,OAAO,EAAC,IAAI,IAAI,OAAO,QACtB,KAAK,CAAC,SAAS;AACZ,UAAI,CAAC;AACD,YAAI,OAAO,KAAK,KAAK;AAAA,UACjB,OACI;AAAA;AAAA;AAEP,YAAI,KAAK;AAAA;AAAA;AAAA,eAIb,OAAO,KAAc,KAA8B;AAC5D,mCAAO,QAAQ,QAAQ,EAAC,OAAO,EAAC,IAAI,IAAI,OAAO,QAC1C,KAAK,UAAQ;AACV,UAAI,CAAC,MAAM;AACP,YAAI,OAAO,KAAK,KAAK;AAAA,UACjB,OACI;AAAA;AAAA;AAGP,YAAI,KAAK;AAAA;AAAA;AAAA;",
  "names": []
}
