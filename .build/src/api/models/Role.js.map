{
  "version": 3,
  "sources": ["../../../../src/api/models/Role.ts"],
  "sourcesContent": ["import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\nimport type { Users, UsersCreationAttributes, UsersId } from './Users';\n\nexport interface RoleAttributes {\n  id: number;\n  RoleName: string;\n}\n\nexport type RolePk = \"id\";\nexport type RoleId = Role[RolePk];\nexport type RoleOptionalAttributes = \"id\";\nexport type RoleCreationAttributes = Optional<RoleAttributes, RoleOptionalAttributes>;\n\nexport class Role extends Model<RoleAttributes, RoleCreationAttributes> implements RoleAttributes {\n  id!: number;\n  RoleName!: string;\n\n  // Role hasOne Users via id\n  User!: Users;\n  getUser!: Sequelize.HasOneGetAssociationMixin<Users>;\n  setUser!: Sequelize.HasOneSetAssociationMixin<Users, UsersId>;\n  createUser!: Sequelize.HasOneCreateAssociationMixin<Users>;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof Role {\n    return Role.init({\n    id: {\n      autoIncrement: true,\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true\n    },\n    RoleName: {\n      type: DataTypes.STRING(45),\n      allowNull: false\n    }\n  }, {\n    sequelize,\n    tableName: 'Role',\n    timestamps: false,\n    indexes: [\n      {\n        name: \"PRIMARY\",\n        unique: true,\n        using: \"BTREE\",\n        fields: [\n          { name: \"id\" },\n        ]\n      },\n    ]\n  });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,uBAA2C;AAapC,mBAAmB,uBAAwE;AAAA,SAUzF,UAAU,WAA6C;AAC5D,WAAO,KAAK,KAAK;AAAA,MACjB,IAAI;AAAA,QACF,eAAe;AAAA,QACf,MAAM,2BAAU;AAAA,QAChB,WAAW;AAAA,QACX,YAAY;AAAA;AAAA,MAEd,UAAU;AAAA,QACR,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,OAEZ;AAAA,MACD;AAAA,MACA,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
