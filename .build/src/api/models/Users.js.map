{
  "version": 3,
  "sources": ["../../../../src/api/models/Users.ts"],
  "sourcesContent": ["import * as Sequelize from 'sequelize';\nimport { DataTypes, Model, Optional } from 'sequelize';\nimport type { Profession, ProfessionId } from './Profession';\nimport type { Results, ResultsId } from './Results';\nimport type { Role, RoleId } from './Role';\n\nexport interface UsersAttributes {\n  id: number;\n  FirstName: string;\n  SecondName: string;\n  MiddleName?: string;\n  DateOfBirth: string;\n  PassportId: string;\n  Adress: string;\n  ProfessionName: number;\n  Login: string;\n  Password: string;\n  Role: number;\n}\n\nexport type UsersPk = \"id\";\nexport type UsersId = Users[UsersPk];\nexport type UsersOptionalAttributes = \"id\" | \"MiddleName\";\nexport type UsersCreationAttributes = Optional<UsersAttributes, UsersOptionalAttributes>;\n\nexport class Users extends Model<UsersAttributes, UsersCreationAttributes> implements UsersAttributes {\n  id!: number;\n  FirstName!: string;\n  SecondName!: string;\n  MiddleName?: string;\n  DateOfBirth!: string;\n  PassportId!: string;\n  Adress!: string;\n  ProfessionName!: number;\n  Login!: string;\n  Password!: string;\n  Role!: number;\n\n  // Users belongsTo Profession via ProfessionName\n  ProfessionName_Profession!: Profession;\n  getProfessionName_Profession!: Sequelize.BelongsToGetAssociationMixin<Profession>;\n  setProfessionName_Profession!: Sequelize.BelongsToSetAssociationMixin<Profession, ProfessionId>;\n  createProfessionName_Profession!: Sequelize.BelongsToCreateAssociationMixin<Profession>;\n  // Users belongsTo Role via id\n  id_Role!: Role;\n  getId_Role!: Sequelize.BelongsToGetAssociationMixin<Role>;\n  setId_Role!: Sequelize.BelongsToSetAssociationMixin<Role, RoleId>;\n  createId_Role!: Sequelize.BelongsToCreateAssociationMixin<Role>;\n  // Users hasMany Results via UserId\n  Results!: Results[];\n  getResults!: Sequelize.HasManyGetAssociationsMixin<Results>;\n  setResults!: Sequelize.HasManySetAssociationsMixin<Results, ResultsId>;\n  addResult!: Sequelize.HasManyAddAssociationMixin<Results, ResultsId>;\n  addResults!: Sequelize.HasManyAddAssociationsMixin<Results, ResultsId>;\n  createResult!: Sequelize.HasManyCreateAssociationMixin<Results>;\n  removeResult!: Sequelize.HasManyRemoveAssociationMixin<Results, ResultsId>;\n  removeResults!: Sequelize.HasManyRemoveAssociationsMixin<Results, ResultsId>;\n  hasResult!: Sequelize.HasManyHasAssociationMixin<Results, ResultsId>;\n  hasResults!: Sequelize.HasManyHasAssociationsMixin<Results, ResultsId>;\n  countResults!: Sequelize.HasManyCountAssociationsMixin;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof Users {\n    return Users.init({\n    id: {\n      autoIncrement: true,\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'Role',\n        key: 'id'\n      }\n    },\n    FirstName: {\n      type: DataTypes.STRING(45),\n      allowNull: false\n    },\n    SecondName: {\n      type: DataTypes.STRING(45),\n      allowNull: false\n    },\n    MiddleName: {\n      type: DataTypes.STRING(45),\n      allowNull: true\n    },\n    DateOfBirth: {\n      type: DataTypes.DATEONLY,\n      allowNull: false\n    },\n    PassportId: {\n      type: DataTypes.STRING(11),\n      allowNull: false\n    },\n    Adress: {\n      type: DataTypes.STRING(60),\n      allowNull: false\n    },\n    ProfessionName: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      references: {\n        model: 'Profession',\n        key: 'id'\n      }\n    },\n    Login: {\n      type: DataTypes.STRING(256),\n      allowNull: false\n    },\n    Password: {\n      type: DataTypes.STRING(256),\n      allowNull: false\n    },\n    Role: {\n      type: DataTypes.INTEGER,\n      allowNull: false\n    }\n  }, {\n    sequelize,\n    tableName: 'Users',\n    timestamps: false,\n    indexes: [\n      {\n        name: \"PRIMARY\",\n        unique: true,\n        using: \"BTREE\",\n        fields: [\n          { name: \"id\" },\n        ]\n      },\n      {\n        name: \"FK_User_ProfessionName_idx\",\n        using: \"BTREE\",\n        fields: [\n          { name: \"ProfessionName\" },\n        ]\n      },\n      {\n        name: \"FK_User_Role_idx\",\n        using: \"BTREE\",\n        fields: [\n          { name: \"Role\" },\n        ]\n      },\n    ]\n  });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,uBAA2C;AAwBpC,oBAAoB,uBAA2E;AAAA,SAoC7F,UAAU,WAA8C;AAC7D,WAAO,MAAM,KAAK;AAAA,MAClB,IAAI;AAAA,QACF,eAAe;AAAA,QACf,MAAM,2BAAU;AAAA,QAChB,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,YAAY;AAAA,UACV,OAAO;AAAA,UACP,KAAK;AAAA;AAAA;AAAA,MAGT,WAAW;AAAA,QACT,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,YAAY;AAAA,QACV,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,YAAY;AAAA,QACV,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,aAAa;AAAA,QACX,MAAM,2BAAU;AAAA,QAChB,WAAW;AAAA;AAAA,MAEb,YAAY;AAAA,QACV,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,QAAQ;AAAA,QACN,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,gBAAgB;AAAA,QACd,MAAM,2BAAU;AAAA,QAChB,WAAW;AAAA,QACX,YAAY;AAAA,UACV,OAAO;AAAA,UACP,KAAK;AAAA;AAAA;AAAA,MAGT,OAAO;AAAA,QACL,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,UAAU;AAAA,QACR,MAAM,2BAAU,OAAO;AAAA,QACvB,WAAW;AAAA;AAAA,MAEb,MAAM;AAAA,QACJ,MAAM,2BAAU;AAAA,QAChB,WAAW;AAAA;AAAA,OAEZ;AAAA,MACD;AAAA,MACA,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,EAAE,MAAM;AAAA;AAAA;AAAA,QAGZ;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,EAAE,MAAM;AAAA;AAAA;AAAA,QAGZ;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
